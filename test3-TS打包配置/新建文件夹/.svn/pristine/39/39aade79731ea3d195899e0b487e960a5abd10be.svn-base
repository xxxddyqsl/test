/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.snail_video.media.eCmdC2S', null, global);
goog.exportSymbol('proto.snail_video.media.eMediaCtrlActs', null, global);
goog.exportSymbol('proto.snail_video.media.eReloginReson', null, global);
goog.exportSymbol('proto.snail_video.media.eUserStatus', null, global);
goog.exportSymbol('proto.snail_video.media.epType', null, global);
goog.exportSymbol('proto.snail_video.media.notify_bind_streams', null, global);
goog.exportSymbol('proto.snail_video.media.notify_cancel_publish', null, global);
goog.exportSymbol('proto.snail_video.media.notify_error', null, global);
goog.exportSymbol('proto.snail_video.media.notify_header', null, global);
goog.exportSymbol('proto.snail_video.media.notify_media_ctrl', null, global);
goog.exportSymbol('proto.snail_video.media.notify_request_relogin', null, global);
goog.exportSymbol('proto.snail_video.media.notify_sendmsg', null, global);
goog.exportSymbol('proto.snail_video.media.notify_setroomattrs', null, global);
goog.exportSymbol('proto.snail_video.media.notify_setuserattrs', null, global);
goog.exportSymbol('proto.snail_video.media.notify_user_status', null, global);
goog.exportSymbol('proto.snail_video.media.notify_webrtc_command', null, global);
goog.exportSymbol('proto.snail_video.media.object_actions', null, global);
goog.exportSymbol('proto.snail_video.media.object_keyvalue', null, global);
goog.exportSymbol('proto.snail_video.media.object_media', null, global);
goog.exportSymbol('proto.snail_video.media.object_msg', null, global);
goog.exportSymbol('proto.snail_video.media.object_user', null, global);
goog.exportSymbol('proto.snail_video.media.object_webrtc_msg', null, global);
goog.exportSymbol('proto.snail_video.media.request_add_participant', null, global);
goog.exportSymbol('proto.snail_video.media.request_client2Server_header', null, global);
goog.exportSymbol('proto.snail_video.media.request_order_streams', null, global);
goog.exportSymbol('proto.snail_video.media.request_order_unorder', null, global);
goog.exportSymbol('proto.snail_video.media.request_ping', null, global);
goog.exportSymbol('proto.snail_video.media.request_register', null, global);
goog.exportSymbol('proto.snail_video.media.request_remove_participant', null, global);
goog.exportSymbol('proto.snail_video.media.request_set_media_attr', null, global);
goog.exportSymbol('proto.snail_video.media.request_setroomattrs', null, global);
goog.exportSymbol('proto.snail_video.media.request_setuserattrs', null, global);
goog.exportSymbol('proto.snail_video.media.request_update_media', null, global);
goog.exportSymbol('proto.snail_video.media.respond_add_participant', null, global);
goog.exportSymbol('proto.snail_video.media.respond_order_unorder', null, global);
goog.exportSymbol('proto.snail_video.media.respond_ping', null, global);
goog.exportSymbol('proto.snail_video.media.respond_register', null, global);
goog.exportSymbol('proto.snail_video.media.respond_remove_participant', null, global);
goog.exportSymbol('proto.snail_video.media.respond_set_media_attr', null, global);
goog.exportSymbol('proto.snail_video.media.respond_setroomattrs', null, global);
goog.exportSymbol('proto.snail_video.media.respond_setuserattrs', null, global);
goog.exportSymbol('proto.snail_video.media.respond_update_media', null, global);
goog.exportSymbol('proto.snail_video.media.response_client2Server_header', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_client2Server_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.request_client2Server_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_client2Server_header.displayName = 'proto.snail_video.media.request_client2Server_header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_client2Server_header.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_client2Server_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_client2Server_header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_client2Server_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: msg.getSn(),
    sessionkey: msg.getSessionkey_asB64(),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_client2Server_header}
 */
proto.snail_video.media.request_client2Server_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_client2Server_header;
  return proto.snail_video.media.request_client2Server_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_client2Server_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_client2Server_header}
 */
proto.snail_video.media.request_client2Server_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_client2Server_header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_client2Server_header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_client2Server_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_client2Server_header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSn();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getSessionkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_client2Server_header} The clone.
 */
proto.snail_video.media.request_client2Server_header.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_client2Server_header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 sn = 1;
 * @return {number}
 */
proto.snail_video.media.request_client2Server_header.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.request_client2Server_header.prototype.setSn = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes sessionkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_client2Server_header.prototype.getSessionkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes sessionkey = 2;
 * This is a type-conversion wrapper around `getSessionkey()`
 * @return {string}
 */
proto.snail_video.media.request_client2Server_header.prototype.getSessionkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionkey()));
};


/**
 * optional bytes sessionkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionkey()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_client2Server_header.prototype.getSessionkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_client2Server_header.prototype.setSessionkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes token = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_client2Server_header.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes token = 3;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail_video.media.request_client2Server_header.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_client2Server_header.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_client2Server_header.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.response_client2Server_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.response_client2Server_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.response_client2Server_header.displayName = 'proto.snail_video.media.response_client2Server_header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.response_client2Server_header.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.response_client2Server_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.response_client2Server_header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.response_client2Server_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: msg.getSn(),
    ec: msg.getEc(),
    subec: msg.getSubec(),
    dbspan: msg.getDbspan(),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.response_client2Server_header}
 */
proto.snail_video.media.response_client2Server_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.response_client2Server_header;
  return proto.snail_video.media.response_client2Server_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.response_client2Server_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.response_client2Server_header}
 */
proto.snail_video.media.response_client2Server_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSubec(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDbspan(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.response_client2Server_header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.response_client2Server_header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.response_client2Server_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.response_client2Server_header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSn();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getEc();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getSubec();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getDbspan();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.response_client2Server_header} The clone.
 */
proto.snail_video.media.response_client2Server_header.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.response_client2Server_header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 sn = 1;
 * @return {number}
 */
proto.snail_video.media.response_client2Server_header.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.response_client2Server_header.prototype.setSn = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 ec = 2;
 * @return {number}
 */
proto.snail_video.media.response_client2Server_header.prototype.getEc = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.snail_video.media.response_client2Server_header.prototype.setEc = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 subec = 3;
 * @return {number}
 */
proto.snail_video.media.response_client2Server_header.prototype.getSubec = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.snail_video.media.response_client2Server_header.prototype.setSubec = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint32 dbspan = 4;
 * @return {number}
 */
proto.snail_video.media.response_client2Server_header.prototype.getDbspan = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.snail_video.media.response_client2Server_header.prototype.setDbspan = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bytes token = 5;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.response_client2Server_header.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes token = 5;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail_video.media.response_client2Server_header.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.response_client2Server_header.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.response_client2Server_header.prototype.setToken = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.notify_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_header.displayName = 'proto.snail_video.media.notify_header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_header.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: msg.getFrom_asB64(),
    to: msg.getTo_asB64(),
    type: msg.getType(),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_header}
 */
proto.snail_video.media.notify_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_header;
  return proto.snail_video.media.notify_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_header}
 */
proto.snail_video.media.notify_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_header} The clone.
 */
proto.snail_video.media.notify_header.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_header.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.snail_video.media.notify_header.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_header.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_header.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes to = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_header.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes to = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.snail_video.media.notify_header.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_header.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_header.prototype.setTo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 type = 3;
 * @return {number}
 */
proto.snail_video.media.notify_header.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.snail_video.media.notify_header.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes token = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_header.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes token = 4;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail_video.media.notify_header.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_header.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_header.prototype.setToken = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.notify_error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_error.displayName = 'proto.snail_video.media.notify_error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_error.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_error} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_error.toObject = function(includeInstance, msg) {
  var f, obj = {
    ec: msg.getEc(),
    subec: msg.getSubec(),
    cmd: msg.getCmd()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_error}
 */
proto.snail_video.media.notify_error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_error;
  return proto.snail_video.media.notify_error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_error}
 */
proto.snail_video.media.notify_error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSubec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_error} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_error.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_error.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEc();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getSubec();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getCmd();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_error} The clone.
 */
proto.snail_video.media.notify_error.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_error} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 ec = 1;
 * @return {number}
 */
proto.snail_video.media.notify_error.prototype.getEc = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.notify_error.prototype.setEc = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 subec = 2;
 * @return {number}
 */
proto.snail_video.media.notify_error.prototype.getSubec = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.snail_video.media.notify_error.prototype.setSubec = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint32 cmd = 3;
 * @return {number}
 */
proto.snail_video.media.notify_error.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.snail_video.media.notify_error.prototype.setCmd = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_actions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.object_actions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_actions.displayName = 'proto.snail_video.media.object_actions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_actions.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_actions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_actions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_actions.toObject = function(includeInstance, msg) {
  var f, obj = {
    acttype: msg.getActtype(),
    ssrcids: msg.getSsrcids(),
    params: msg.getParams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_actions}
 */
proto.snail_video.media.object_actions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_actions;
  return proto.snail_video.media.object_actions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_actions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_actions}
 */
proto.snail_video.media.object_actions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setActtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSsrcids(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_actions} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_actions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_actions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_actions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActtype();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getSsrcids();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_actions} The clone.
 */
proto.snail_video.media.object_actions.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_actions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 acttype = 1;
 * @return {number}
 */
proto.snail_video.media.object_actions.prototype.getActtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_actions.prototype.setActtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 ssrcids = 2;
 * @return {number}
 */
proto.snail_video.media.object_actions.prototype.getSsrcids = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_actions.prototype.setSsrcids = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes params = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_actions.prototype.getParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes params = 3;
 * This is a type-conversion wrapper around `getParams()`
 * @return {string}
 */
proto.snail_video.media.object_actions.prototype.getParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParams()));
};


/**
 * optional bytes params = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParams()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_actions.prototype.getParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParams()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_actions.prototype.setParams = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_keyvalue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.object_keyvalue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_keyvalue.displayName = 'proto.snail_video.media.object_keyvalue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_keyvalue.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_keyvalue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_keyvalue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_keyvalue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_keyvalue}
 */
proto.snail_video.media.object_keyvalue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_keyvalue;
  return proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_keyvalue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_keyvalue}
 */
proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_keyvalue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_keyvalue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_keyvalue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_keyvalue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_keyvalue} The clone.
 */
proto.snail_video.media.object_keyvalue.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_keyvalue} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_keyvalue.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.snail_video.media.object_keyvalue.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_keyvalue.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_keyvalue.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_keyvalue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.snail_video.media.object_keyvalue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_keyvalue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_keyvalue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_webrtc_msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.object_webrtc_msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_webrtc_msg.displayName = 'proto.snail_video.media.object_webrtc_msg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_webrtc_msg.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_webrtc_msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_webrtc_msg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_webrtc_msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mline: msg.getMline_asB64(),
    mlineIndex: msg.getMlineIndex(),
    sdp: msg.getSdp_asB64(),
    peerParams: msg.getPeerParams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_webrtc_msg}
 */
proto.snail_video.media.object_webrtc_msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_webrtc_msg;
  return proto.snail_video.media.object_webrtc_msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_webrtc_msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_webrtc_msg}
 */
proto.snail_video.media.object_webrtc_msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMline(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMlineIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSdp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_webrtc_msg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_webrtc_msg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_webrtc_msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_webrtc_msg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMline_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getMlineIndex();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getSdp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getPeerParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_webrtc_msg} The clone.
 */
proto.snail_video.media.object_webrtc_msg.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_webrtc_msg} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes mline = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getMline = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes mline = 1;
 * This is a type-conversion wrapper around `getMline()`
 * @return {string}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getMline_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMline()));
};


/**
 * optional bytes mline = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMline()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getMline_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMline()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_webrtc_msg.prototype.setMline = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional sint32 mline_index = 2;
 * @return {number}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getMlineIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_webrtc_msg.prototype.setMlineIndex = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes sdp = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getSdp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes sdp = 3;
 * This is a type-conversion wrapper around `getSdp()`
 * @return {string}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getSdp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSdp()));
};


/**
 * optional bytes sdp = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSdp()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getSdp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSdp()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_webrtc_msg.prototype.setSdp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes peer_params = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getPeerParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes peer_params = 4;
 * This is a type-conversion wrapper around `getPeerParams()`
 * @return {string}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getPeerParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerParams()));
};


/**
 * optional bytes peer_params = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerParams()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_webrtc_msg.prototype.getPeerParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerParams()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_webrtc_msg.prototype.setPeerParams = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_user = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.object_user.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.object_user, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_user.displayName = 'proto.snail_video.media.object_user';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.object_user.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_user.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_user.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_user} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_user.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    clientkey: msg.getClientkey_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance),
    status: msg.getStatus(),
    joinTime: msg.getJoinTime(),
    leaveTime: msg.getLeaveTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_user}
 */
proto.snail_video.media.object_user.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_user;
  return proto.snail_video.media.object_user.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_user} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_user}
 */
proto.snail_video.media.object_user.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientkey(value);
      break;
    case 3:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setJoinTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeaveTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_user} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_user.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_user.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_user.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getClientkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = this.getStatus();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getJoinTime();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getLeaveTime();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_user} The clone.
 */
proto.snail_video.media.object_user.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_user} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_user.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail_video.media.object_user.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_user.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_user.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes clientkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_user.prototype.getClientkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes clientkey = 2;
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {string}
 */
proto.snail_video.media.object_user.prototype.getClientkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientkey()));
};


/**
 * optional bytes clientkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_user.prototype.getClientkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_user.prototype.setClientkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated object_keyvalue attrs = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.object_user.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 3));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.object_user.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.snail_video.media.object_user.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};


/**
 * optional sint32 status = 4;
 * @return {number}
 */
proto.snail_video.media.object_user.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_user.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional sint32 join_time = 5;
 * @return {number}
 */
proto.snail_video.media.object_user.prototype.getJoinTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_user.prototype.setJoinTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional sint32 leave_time = 6;
 * @return {number}
 */
proto.snail_video.media.object_user.prototype.getLeaveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.snail_video.media.object_user.prototype.setLeaveTime = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.object_media.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.object_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_media.displayName = 'proto.snail_video.media.object_media';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.object_media.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_media} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_media}
 */
proto.snail_video.media.object_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_media;
  return proto.snail_video.media.object_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_media}
 */
proto.snail_video.media.object_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_media} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_media.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_media.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_media} The clone.
 */
proto.snail_video.media.object_media.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_media} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_media.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.snail_video.media.object_media.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_media.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_media.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.object_media.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 2));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.object_media.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.snail_video.media.object_media.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.object_msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.object_msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.object_msg.displayName = 'proto.snail_video.media.object_msg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.object_msg.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.object_msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.object_msg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.object_msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientkey: msg.getClientkey_asB64(),
    msgdata: msg.getMsgdata_asB64(),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.object_msg}
 */
proto.snail_video.media.object_msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.object_msg;
  return proto.snail_video.media.object_msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.object_msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.object_msg}
 */
proto.snail_video.media.object_msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgdata(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.object_msg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_msg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.object_msg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClientkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getMsgdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.object_msg} The clone.
 */
proto.snail_video.media.object_msg.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.object_msg} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes clientkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_msg.prototype.getClientkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes clientkey = 1;
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {string}
 */
proto.snail_video.media.object_msg.prototype.getClientkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientkey()));
};


/**
 * optional bytes clientkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_msg.prototype.getClientkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_msg.prototype.setClientkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes msgdata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_msg.prototype.getMsgdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes msgdata = 2;
 * This is a type-conversion wrapper around `getMsgdata()`
 * @return {string}
 */
proto.snail_video.media.object_msg.prototype.getMsgdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgdata()));
};


/**
 * optional bytes msgdata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgdata()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_msg.prototype.getMsgdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgdata()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_msg.prototype.setMsgdata = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes token = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.object_msg.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes token = 3;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail_video.media.object_msg.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.object_msg.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.object_msg.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.request_ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_ping.displayName = 'proto.snail_video.media.request_ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_ping.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_ping} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_ping}
 */
proto.snail_video.media.request_ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_ping;
  return proto.snail_video.media.request_ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_ping}
 */
proto.snail_video.media.request_ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_ping} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_ping.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_ping.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_ping} The clone.
 */
proto.snail_video.media.request_ping.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_ping} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint64 timestamp = 1;
 * @return {number}
 */
proto.snail_video.media.request_ping.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.request_ping.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.respond_ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_ping.displayName = 'proto.snail_video.media.respond_ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_ping.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_ping} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_ping}
 */
proto.snail_video.media.respond_ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_ping;
  return proto.snail_video.media.respond_ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_ping}
 */
proto.snail_video.media.respond_ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_ping} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_ping.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_ping.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_ping} The clone.
 */
proto.snail_video.media.respond_ping.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_ping} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint64 timestamp = 1;
 * @return {number}
 */
proto.snail_video.media.respond_ping.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.respond_ping.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_register.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_register.displayName = 'proto.snail_video.media.request_register';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_register.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_register.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_register} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_register.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.snail_video.media.object_user.toObject(includeInstance, f),
    loginseq: msg.getLoginseq_asB64(),
    version: msg.getVersion_asB64(),
    roomid: msg.getRoomid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance),
    ordermode: msg.getOrdermode_asB64(),
    notify: msg.getNotify_asB64(),
    serverdata: msg.getServerdata_asB64(),
    serverIp: msg.getServerIp_asB64(),
    epType: msg.getEpType()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_register}
 */
proto.snail_video.media.request_register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_register;
  return proto.snail_video.media.request_register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_register}
 */
proto.snail_video.media.request_register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLoginseq(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 5:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrdermode(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNotify(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerdata(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerIp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEpType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_register} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_register.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_register.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
  f = this.getLoginseq_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getVersion_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getRoomid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = this.getOrdermode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = this.getNotify_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = this.getServerdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getServerIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = this.getEpType();
  if (f !== 0) {
    writer.writeSint32(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_register} The clone.
 */
proto.snail_video.media.request_register.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_register} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional object_user user = 1;
 * @return {proto.snail_video.media.object_user}
 */
proto.snail_video.media.request_register.prototype.getUser = function() {
  return /** @type{proto.snail_video.media.object_user} */ (
    jspb.Message.getWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {proto.snail_video.media.object_user|undefined} value  */
proto.snail_video.media.request_register.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.snail_video.media.request_register.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.snail_video.media.request_register.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes loginseq = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getLoginseq = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes loginseq = 2;
 * This is a type-conversion wrapper around `getLoginseq()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getLoginseq_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLoginseq()));
};


/**
 * optional bytes loginseq = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLoginseq()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getLoginseq_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLoginseq()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setLoginseq = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes version = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getVersion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes version = 3;
 * This is a type-conversion wrapper around `getVersion()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersion()));
};


/**
 * optional bytes version = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersion()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersion()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes roomid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes roomid = 4;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * optional bytes roomid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated object_keyvalue attrs = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.request_register.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 5));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.request_register.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.snail_video.media.request_register.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};


/**
 * optional bytes ordermode = 6;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getOrdermode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/**
 * optional bytes ordermode = 6;
 * This is a type-conversion wrapper around `getOrdermode()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getOrdermode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrdermode()));
};


/**
 * optional bytes ordermode = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdermode()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getOrdermode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrdermode()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setOrdermode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes notify = 7;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getNotify = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes notify = 7;
 * This is a type-conversion wrapper around `getNotify()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getNotify_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNotify()));
};


/**
 * optional bytes notify = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNotify()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getNotify_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNotify()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setNotify = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes serverdata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getServerdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes serverdata = 8;
 * This is a type-conversion wrapper around `getServerdata()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getServerdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerdata()));
};


/**
 * optional bytes serverdata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerdata()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getServerdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerdata()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setServerdata = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes server_ip = 9;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_register.prototype.getServerIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/**
 * optional bytes server_ip = 9;
 * This is a type-conversion wrapper around `getServerIp()`
 * @return {string}
 */
proto.snail_video.media.request_register.prototype.getServerIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerIp()));
};


/**
 * optional bytes server_ip = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerIp()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_register.prototype.getServerIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerIp()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_register.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional sint32 ep_type = 10;
 * @return {number}
 */
proto.snail_video.media.request_register.prototype.getEpType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.snail_video.media.request_register.prototype.setEpType = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.respond_register.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.respond_register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_register.displayName = 'proto.snail_video.media.respond_register';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.respond_register.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_register.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_register} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_register.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail_video.media.object_user.toObject, includeInstance),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance),
    severCurrentTime: msg.getSeverCurrentTime(),
    startedTime: msg.getStartedTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_register}
 */
proto.snail_video.media.respond_register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_register;
  return proto.snail_video.media.respond_register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_register}
 */
proto.snail_video.media.respond_register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    case 2:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSeverCurrentTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStartedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_register} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_register.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_register.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = this.getSeverCurrentTime();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = this.getStartedTime();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_register} The clone.
 */
proto.snail_video.media.respond_register.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_register} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_user users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_user>}
 */
proto.snail_video.media.respond_register.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {Array.<!proto.snail_video.media.object_user>} value  */
proto.snail_video.media.respond_register.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.respond_register.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated object_keyvalue attrs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.respond_register.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 2));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.respond_register.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.snail_video.media.respond_register.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};


/**
 * optional sint64 sever_current_time = 3;
 * @return {number}
 */
proto.snail_video.media.respond_register.prototype.getSeverCurrentTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.snail_video.media.respond_register.prototype.setSeverCurrentTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint32 started_time = 4;
 * @return {number}
 */
proto.snail_video.media.respond_register.prototype.getStartedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.snail_video.media.respond_register.prototype.setStartedTime = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_user_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_user_status.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_user_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_user_status.displayName = 'proto.snail_video.media.notify_user_status';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_user_status.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_user_status.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_user_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_user_status} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_user_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail_video.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_user_status}
 */
proto.snail_video.media.notify_user_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_user_status;
  return proto.snail_video.media.notify_user_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_user_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_user_status}
 */
proto.snail_video.media.notify_user_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_user_status} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_user_status.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_user_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_user_status.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_user_status} The clone.
 */
proto.snail_video.media.notify_user_status.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_user_status} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_user users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_user>}
 */
proto.snail_video.media.notify_user_status.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {Array.<!proto.snail_video.media.object_user>} value  */
proto.snail_video.media.notify_user_status.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.notify_user_status.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_add_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_add_participant.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_add_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_add_participant.displayName = 'proto.snail_video.media.request_add_participant';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_add_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_add_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_add_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_add_participant} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_add_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail_video.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_add_participant}
 */
proto.snail_video.media.request_add_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_add_participant;
  return proto.snail_video.media.request_add_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_add_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_add_participant}
 */
proto.snail_video.media.request_add_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_add_participant} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_add_participant.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_add_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_add_participant.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_add_participant} The clone.
 */
proto.snail_video.media.request_add_participant.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_add_participant} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_user users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_user>}
 */
proto.snail_video.media.request_add_participant.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {Array.<!proto.snail_video.media.object_user>} value  */
proto.snail_video.media.request_add_participant.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.request_add_participant.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_add_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.respond_add_participant.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.respond_add_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_add_participant.displayName = 'proto.snail_video.media.respond_add_participant';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.respond_add_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_add_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_add_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_add_participant} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_add_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail_video.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_add_participant}
 */
proto.snail_video.media.respond_add_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_add_participant;
  return proto.snail_video.media.respond_add_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_add_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_add_participant}
 */
proto.snail_video.media.respond_add_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_add_participant} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_add_participant.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_add_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_add_participant.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_add_participant} The clone.
 */
proto.snail_video.media.respond_add_participant.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_add_participant} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_user users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_user>}
 */
proto.snail_video.media.respond_add_participant.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {Array.<!proto.snail_video.media.object_user>} value  */
proto.snail_video.media.respond_add_participant.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.respond_add_participant.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_remove_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_remove_participant.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_remove_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_remove_participant.displayName = 'proto.snail_video.media.request_remove_participant';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_remove_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_remove_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_remove_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_remove_participant} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_remove_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: msg.getUsersList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_remove_participant}
 */
proto.snail_video.media.request_remove_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_remove_participant;
  return proto.snail_video.media.request_remove_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_remove_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_remove_participant}
 */
proto.snail_video.media.request_remove_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_remove_participant} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_remove_participant.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_remove_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_remove_participant.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_remove_participant} The clone.
 */
proto.snail_video.media.request_remove_participant.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_remove_participant} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail_video.media.request_remove_participant.prototype.getUsersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getUsersList()`
 * @return {!Array.<string>}
 */
proto.snail_video.media.request_remove_participant.prototype.getUsersList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getUsersList()));
};


/**
 * repeated bytes users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUsersList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.snail_video.media.request_remove_participant.prototype.getUsersList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUsersList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.snail_video.media.request_remove_participant.prototype.setUsersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.snail_video.media.request_remove_participant.prototype.clearUsersList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_remove_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.respond_remove_participant.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.respond_remove_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_remove_participant.displayName = 'proto.snail_video.media.respond_remove_participant';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.respond_remove_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_remove_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_remove_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_remove_participant} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_remove_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail_video.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_remove_participant}
 */
proto.snail_video.media.respond_remove_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_remove_participant;
  return proto.snail_video.media.respond_remove_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_remove_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_remove_participant}
 */
proto.snail_video.media.respond_remove_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_user;
      reader.readMessage(value,proto.snail_video.media.object_user.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_remove_participant} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_remove_participant.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_remove_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_remove_participant.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_remove_participant} The clone.
 */
proto.snail_video.media.respond_remove_participant.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_remove_participant} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_user users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_user>}
 */
proto.snail_video.media.respond_remove_participant.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_user, 1));
};


/** @param {Array.<!proto.snail_video.media.object_user>} value  */
proto.snail_video.media.respond_remove_participant.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.respond_remove_participant.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_webrtc_command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.notify_webrtc_command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_webrtc_command.displayName = 'proto.snail_video.media.notify_webrtc_command';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_webrtc_command.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_webrtc_command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_webrtc_command} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_webrtc_command.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromid: msg.getFromid_asB64(),
    toid: msg.getToid_asB64(),
    msgtype: msg.getMsgtype_asB64(),
    rtcmsg: (f = msg.getRtcmsg()) && proto.snail_video.media.object_webrtc_msg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_webrtc_command}
 */
proto.snail_video.media.notify_webrtc_command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_webrtc_command;
  return proto.snail_video.media.notify_webrtc_command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_webrtc_command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_webrtc_command}
 */
proto.snail_video.media.notify_webrtc_command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgtype(value);
      break;
    case 4:
      var value = new proto.snail_video.media.object_webrtc_msg;
      reader.readMessage(value,proto.snail_video.media.object_webrtc_msg.deserializeBinaryFromReader);
      msg.setRtcmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_webrtc_command} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_webrtc_command.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_webrtc_command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_webrtc_command.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFromid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getToid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getMsgtype_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getRtcmsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.snail_video.media.object_webrtc_msg.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_webrtc_command} The clone.
 */
proto.snail_video.media.notify_webrtc_command.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_webrtc_command} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes fromid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getFromid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes fromid = 1;
 * This is a type-conversion wrapper around `getFromid()`
 * @return {string}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getFromid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromid()));
};


/**
 * optional bytes fromid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getFromid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_webrtc_command.prototype.setFromid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes toid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getToid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes toid = 2;
 * This is a type-conversion wrapper around `getToid()`
 * @return {string}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getToid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToid()));
};


/**
 * optional bytes toid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getToid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_webrtc_command.prototype.setToid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes msgtype = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getMsgtype = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes msgtype = 3;
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {string}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getMsgtype_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgtype()));
};


/**
 * optional bytes msgtype = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getMsgtype_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgtype()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_webrtc_command.prototype.setMsgtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional object_webrtc_msg rtcmsg = 4;
 * @return {proto.snail_video.media.object_webrtc_msg}
 */
proto.snail_video.media.notify_webrtc_command.prototype.getRtcmsg = function() {
  return /** @type{proto.snail_video.media.object_webrtc_msg} */ (
    jspb.Message.getWrapperField(this, proto.snail_video.media.object_webrtc_msg, 4));
};


/** @param {proto.snail_video.media.object_webrtc_msg|undefined} value  */
proto.snail_video.media.notify_webrtc_command.prototype.setRtcmsg = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.snail_video.media.notify_webrtc_command.prototype.clearRtcmsg = function() {
  this.setRtcmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.snail_video.media.notify_webrtc_command.prototype.hasRtcmsg = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_setuserattrs.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_setuserattrs.displayName = 'proto.snail_video.media.request_setuserattrs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_setuserattrs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_setuserattrs}
 */
proto.snail_video.media.request_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_setuserattrs;
  return proto.snail_video.media.request_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_setuserattrs}
 */
proto.snail_video.media.request_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_setuserattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_setuserattrs} The clone.
 */
proto.snail_video.media.request_setuserattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_setuserattrs} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.request_setuserattrs.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail_video.media.request_setuserattrs.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_setuserattrs.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.request_setuserattrs.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.request_setuserattrs.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 2));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.request_setuserattrs.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.snail_video.media.request_setuserattrs.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.respond_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_setuserattrs.displayName = 'proto.snail_video.media.respond_setuserattrs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_setuserattrs}
 */
proto.snail_video.media.respond_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_setuserattrs;
  return proto.snail_video.media.respond_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_setuserattrs}
 */
proto.snail_video.media.respond_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_setuserattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_setuserattrs} The clone.
 */
proto.snail_video.media.respond_setuserattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_setuserattrs} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_setuserattrs.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_setuserattrs.displayName = 'proto.snail_video.media.notify_setuserattrs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_setuserattrs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_setuserattrs}
 */
proto.snail_video.media.notify_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_setuserattrs;
  return proto.snail_video.media.notify_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_setuserattrs}
 */
proto.snail_video.media.notify_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_setuserattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_setuserattrs} The clone.
 */
proto.snail_video.media.notify_setuserattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_setuserattrs} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail_video.media.notify_setuserattrs.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail_video.media.notify_setuserattrs.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_setuserattrs.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.snail_video.media.notify_setuserattrs.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.notify_setuserattrs.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 2));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.notify_setuserattrs.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.snail_video.media.notify_setuserattrs.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_setroomattrs.displayName = 'proto.snail_video.media.request_setroomattrs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_setroomattrs}
 */
proto.snail_video.media.request_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_setroomattrs;
  return proto.snail_video.media.request_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_setroomattrs}
 */
proto.snail_video.media.request_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_setroomattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_setroomattrs} The clone.
 */
proto.snail_video.media.request_setroomattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_setroomattrs} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_keyvalue attrs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.request_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 1));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.request_setroomattrs.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.request_setroomattrs.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.respond_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.respond_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_setroomattrs.displayName = 'proto.snail_video.media.respond_setroomattrs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.respond_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_setroomattrs}
 */
proto.snail_video.media.respond_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_setroomattrs;
  return proto.snail_video.media.respond_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_setroomattrs}
 */
proto.snail_video.media.respond_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_setroomattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_setroomattrs} The clone.
 */
proto.snail_video.media.respond_setroomattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_setroomattrs} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_keyvalue attrs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.respond_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 1));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.respond_setroomattrs.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.respond_setroomattrs.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_setroomattrs.displayName = 'proto.snail_video.media.notify_setroomattrs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_setroomattrs}
 */
proto.snail_video.media.notify_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_setroomattrs;
  return proto.snail_video.media.notify_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_setroomattrs}
 */
proto.snail_video.media.notify_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getAttrsList().push(value);
      msg.setAttrsList(msg.getAttrsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_setroomattrs.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_setroomattrs} The clone.
 */
proto.snail_video.media.notify_setroomattrs.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_setroomattrs} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_keyvalue attrs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.notify_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 1));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.notify_setroomattrs.prototype.setAttrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.notify_setroomattrs.prototype.clearAttrsList = function() {
  this.setAttrsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_update_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_update_media.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_update_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_update_media.displayName = 'proto.snail_video.media.request_update_media';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_update_media.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_update_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_update_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_update_media} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_update_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    proto.snail_video.media.object_media.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_update_media}
 */
proto.snail_video.media.request_update_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_update_media;
  return proto.snail_video.media.request_update_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_update_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_update_media}
 */
proto.snail_video.media.request_update_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_media;
      reader.readMessage(value,proto.snail_video.media.object_media.deserializeBinaryFromReader);
      msg.getMediasList().push(value);
      msg.setMediasList(msg.getMediasList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_update_media} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_update_media.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_update_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_update_media.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_update_media} The clone.
 */
proto.snail_video.media.request_update_media.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_update_media} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_media medias = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_media>}
 */
proto.snail_video.media.request_update_media.prototype.getMediasList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_media>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_media, 1));
};


/** @param {Array.<!proto.snail_video.media.object_media>} value  */
proto.snail_video.media.request_update_media.prototype.setMediasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.request_update_media.prototype.clearMediasList = function() {
  this.setMediasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_update_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.respond_update_media.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.respond_update_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_update_media.displayName = 'proto.snail_video.media.respond_update_media';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.respond_update_media.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_update_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_update_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_update_media} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_update_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    proto.snail_video.media.object_media.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_update_media}
 */
proto.snail_video.media.respond_update_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_update_media;
  return proto.snail_video.media.respond_update_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_update_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_update_media}
 */
proto.snail_video.media.respond_update_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_media;
      reader.readMessage(value,proto.snail_video.media.object_media.deserializeBinaryFromReader);
      msg.getMediasList().push(value);
      msg.setMediasList(msg.getMediasList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_update_media} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_update_media.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_update_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_update_media.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_update_media} The clone.
 */
proto.snail_video.media.respond_update_media.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_update_media} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_media medias = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_media>}
 */
proto.snail_video.media.respond_update_media.prototype.getMediasList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_media>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_media, 1));
};


/** @param {Array.<!proto.snail_video.media.object_media>} value  */
proto.snail_video.media.respond_update_media.prototype.setMediasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.respond_update_media.prototype.clearMediasList = function() {
  this.setMediasList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_cancel_publish = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.notify_cancel_publish, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_cancel_publish.displayName = 'proto.snail_video.media.notify_cancel_publish';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_cancel_publish.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_cancel_publish.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_cancel_publish} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_cancel_publish.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_cancel_publish}
 */
proto.snail_video.media.notify_cancel_publish.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_cancel_publish;
  return proto.snail_video.media.notify_cancel_publish.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_cancel_publish} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_cancel_publish}
 */
proto.snail_video.media.notify_cancel_publish.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_cancel_publish} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_cancel_publish.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_cancel_publish.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_cancel_publish.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_cancel_publish} The clone.
 */
proto.snail_video.media.notify_cancel_publish.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_cancel_publish} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_set_media_attr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.request_set_media_attr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_set_media_attr.displayName = 'proto.snail_video.media.request_set_media_attr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_set_media_attr.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_set_media_attr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_set_media_attr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_set_media_attr.toObject = function(includeInstance, msg) {
  var f, obj = {
    media: (f = msg.getMedia()) && proto.snail_video.media.object_media.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_set_media_attr}
 */
proto.snail_video.media.request_set_media_attr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_set_media_attr;
  return proto.snail_video.media.request_set_media_attr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_set_media_attr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_set_media_attr}
 */
proto.snail_video.media.request_set_media_attr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_media;
      reader.readMessage(value,proto.snail_video.media.object_media.deserializeBinaryFromReader);
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_set_media_attr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_set_media_attr.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_set_media_attr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_set_media_attr.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail_video.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_set_media_attr} The clone.
 */
proto.snail_video.media.request_set_media_attr.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_set_media_attr} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional object_media media = 1;
 * @return {proto.snail_video.media.object_media}
 */
proto.snail_video.media.request_set_media_attr.prototype.getMedia = function() {
  return /** @type{proto.snail_video.media.object_media} */ (
    jspb.Message.getWrapperField(this, proto.snail_video.media.object_media, 1));
};


/** @param {proto.snail_video.media.object_media|undefined} value  */
proto.snail_video.media.request_set_media_attr.prototype.setMedia = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.snail_video.media.request_set_media_attr.prototype.clearMedia = function() {
  this.setMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.snail_video.media.request_set_media_attr.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_set_media_attr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.respond_set_media_attr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_set_media_attr.displayName = 'proto.snail_video.media.respond_set_media_attr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_set_media_attr.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_set_media_attr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_set_media_attr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_set_media_attr.toObject = function(includeInstance, msg) {
  var f, obj = {
    media: (f = msg.getMedia()) && proto.snail_video.media.object_media.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_set_media_attr}
 */
proto.snail_video.media.respond_set_media_attr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_set_media_attr;
  return proto.snail_video.media.respond_set_media_attr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_set_media_attr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_set_media_attr}
 */
proto.snail_video.media.respond_set_media_attr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_media;
      reader.readMessage(value,proto.snail_video.media.object_media.deserializeBinaryFromReader);
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_set_media_attr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_set_media_attr.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_set_media_attr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_set_media_attr.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail_video.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_set_media_attr} The clone.
 */
proto.snail_video.media.respond_set_media_attr.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_set_media_attr} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional object_media media = 1;
 * @return {proto.snail_video.media.object_media}
 */
proto.snail_video.media.respond_set_media_attr.prototype.getMedia = function() {
  return /** @type{proto.snail_video.media.object_media} */ (
    jspb.Message.getWrapperField(this, proto.snail_video.media.object_media, 1));
};


/** @param {proto.snail_video.media.object_media|undefined} value  */
proto.snail_video.media.respond_set_media_attr.prototype.setMedia = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.snail_video.media.respond_set_media_attr.prototype.clearMedia = function() {
  this.setMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.snail_video.media.respond_set_media_attr.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_order_unorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_order_unorder.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_order_unorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_order_unorder.displayName = 'proto.snail_video.media.request_order_unorder';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_order_unorder.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_order_unorder.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_order_unorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_order_unorder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_order_unorder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: msg.getOrdersList_asB64(),
    unordersList: msg.getUnordersList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_order_unorder}
 */
proto.snail_video.media.request_order_unorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_order_unorder;
  return proto.snail_video.media.request_order_unorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_order_unorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_order_unorder}
 */
proto.snail_video.media.request_order_unorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getOrdersList().push(value);
      msg.setOrdersList(msg.getOrdersList());
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getUnordersList().push(value);
      msg.setUnordersList(msg.getUnordersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_order_unorder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_order_unorder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_order_unorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_order_unorder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrdersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = this.getUnordersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_order_unorder} The clone.
 */
proto.snail_video.media.request_order_unorder.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_order_unorder} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail_video.media.request_order_unorder.prototype.getOrdersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array.<string>}
 */
proto.snail_video.media.request_order_unorder.prototype.getOrdersList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getOrdersList()));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.snail_video.media.request_order_unorder.prototype.getOrdersList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOrdersList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.snail_video.media.request_order_unorder.prototype.setOrdersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.snail_video.media.request_order_unorder.prototype.clearOrdersList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated bytes unorders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail_video.media.request_order_unorder.prototype.getUnordersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes unorders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getUnordersList()`
 * @return {!Array.<string>}
 */
proto.snail_video.media.request_order_unorder.prototype.getUnordersList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getUnordersList()));
};


/**
 * repeated bytes unorders = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnordersList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.snail_video.media.request_order_unorder.prototype.getUnordersList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUnordersList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.snail_video.media.request_order_unorder.prototype.setUnordersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.snail_video.media.request_order_unorder.prototype.clearUnordersList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.respond_order_unorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.respond_order_unorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.respond_order_unorder.displayName = 'proto.snail_video.media.respond_order_unorder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.respond_order_unorder.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.respond_order_unorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.respond_order_unorder} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.respond_order_unorder.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.respond_order_unorder}
 */
proto.snail_video.media.respond_order_unorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.respond_order_unorder;
  return proto.snail_video.media.respond_order_unorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.respond_order_unorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.respond_order_unorder}
 */
proto.snail_video.media.respond_order_unorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.respond_order_unorder} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_order_unorder.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.respond_order_unorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.respond_order_unorder.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.respond_order_unorder} The clone.
 */
proto.snail_video.media.respond_order_unorder.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.respond_order_unorder} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.request_order_streams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.request_order_streams.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.request_order_streams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.request_order_streams.displayName = 'proto.snail_video.media.request_order_streams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.request_order_streams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.request_order_streams.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.request_order_streams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.request_order_streams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.request_order_streams.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: msg.getOrdersList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.request_order_streams}
 */
proto.snail_video.media.request_order_streams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.request_order_streams;
  return proto.snail_video.media.request_order_streams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.request_order_streams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.request_order_streams}
 */
proto.snail_video.media.request_order_streams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getOrdersList().push(value);
      msg.setOrdersList(msg.getOrdersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.request_order_streams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_order_streams.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.request_order_streams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.request_order_streams.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrdersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.request_order_streams} The clone.
 */
proto.snail_video.media.request_order_streams.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.request_order_streams} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail_video.media.request_order_streams.prototype.getOrdersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array.<string>}
 */
proto.snail_video.media.request_order_streams.prototype.getOrdersList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getOrdersList()));
};


/**
 * repeated bytes orders = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.snail_video.media.request_order_streams.prototype.getOrdersList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOrdersList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.snail_video.media.request_order_streams.prototype.setOrdersList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.snail_video.media.request_order_streams.prototype.clearOrdersList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_bind_streams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_bind_streams.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_bind_streams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_bind_streams.displayName = 'proto.snail_video.media.notify_bind_streams';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_bind_streams.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_bind_streams.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_bind_streams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_bind_streams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_bind_streams.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.snail_video.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_bind_streams}
 */
proto.snail_video.media.notify_bind_streams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_bind_streams;
  return proto.snail_video.media.notify_bind_streams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_bind_streams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_bind_streams}
 */
proto.snail_video.media.notify_bind_streams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_keyvalue;
      reader.readMessage(value,proto.snail_video.media.object_keyvalue.deserializeBinaryFromReader);
      msg.getStreamsList().push(value);
      msg.setStreamsList(msg.getStreamsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_bind_streams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_bind_streams.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_bind_streams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_bind_streams.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_bind_streams} The clone.
 */
proto.snail_video.media.notify_bind_streams.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_bind_streams} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_keyvalue streams = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_keyvalue>}
 */
proto.snail_video.media.notify_bind_streams.prototype.getStreamsList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_keyvalue, 1));
};


/** @param {Array.<!proto.snail_video.media.object_keyvalue>} value  */
proto.snail_video.media.notify_bind_streams.prototype.setStreamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.notify_bind_streams.prototype.clearStreamsList = function() {
  this.setStreamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_media_ctrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_media_ctrl.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_media_ctrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_media_ctrl.displayName = 'proto.snail_video.media.notify_media_ctrl';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_media_ctrl.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_media_ctrl.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_media_ctrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_media_ctrl} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_media_ctrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.getField(msg, 1),
    paramsList: msg.getParamsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_media_ctrl}
 */
proto.snail_video.media.notify_media_ctrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_media_ctrl;
  return proto.snail_video.media.notify_media_ctrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_media_ctrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_media_ctrl}
 */
proto.snail_video.media.notify_media_ctrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setActionsList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getParamsList().push(value);
      msg.setParamsList(msg.getParamsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_media_ctrl} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_media_ctrl.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_media_ctrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_media_ctrl.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActionsList();
  if (f.length > 0) {
    writer.writePackedSint32(
      1,
      f
    );
  }
  f = this.getParamsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_media_ctrl} The clone.
 */
proto.snail_video.media.notify_media_ctrl.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_media_ctrl} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated sint32 actions = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.snail_video.media.notify_media_ctrl.prototype.getActionsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>} value  */
proto.snail_video.media.notify_media_ctrl.prototype.setActionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.snail_video.media.notify_media_ctrl.prototype.clearActionsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated bytes params = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail_video.media.notify_media_ctrl.prototype.getParamsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 2));
};


/**
 * repeated bytes params = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getParamsList()`
 * @return {!Array.<string>}
 */
proto.snail_video.media.notify_media_ctrl.prototype.getParamsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getParamsList()));
};


/**
 * repeated bytes params = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.snail_video.media.notify_media_ctrl.prototype.getParamsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParamsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.snail_video.media.notify_media_ctrl.prototype.setParamsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.snail_video.media.notify_media_ctrl.prototype.clearParamsList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_request_relogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail_video.media.notify_request_relogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_request_relogin.displayName = 'proto.snail_video.media.notify_request_relogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_request_relogin.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_request_relogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_request_relogin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_request_relogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    reson: msg.getReson()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_request_relogin}
 */
proto.snail_video.media.notify_request_relogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_request_relogin;
  return proto.snail_video.media.notify_request_relogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_request_relogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_request_relogin}
 */
proto.snail_video.media.notify_request_relogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setReson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_request_relogin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_request_relogin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_request_relogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_request_relogin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getReson();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_request_relogin} The clone.
 */
proto.snail_video.media.notify_request_relogin.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_request_relogin} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional sint32 reson = 1;
 * @return {number}
 */
proto.snail_video.media.notify_request_relogin.prototype.getReson = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.snail_video.media.notify_request_relogin.prototype.setReson = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail_video.media.notify_sendmsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail_video.media.notify_sendmsg.repeatedFields_, null);
};
goog.inherits(proto.snail_video.media.notify_sendmsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.snail_video.media.notify_sendmsg.displayName = 'proto.snail_video.media.notify_sendmsg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail_video.media.notify_sendmsg.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail_video.media.notify_sendmsg.prototype.toObject = function(opt_includeInstance) {
  return proto.snail_video.media.notify_sendmsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail_video.media.notify_sendmsg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.snail_video.media.notify_sendmsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgList: jspb.Message.toObjectList(msg.getMsgList(),
    proto.snail_video.media.object_msg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail_video.media.notify_sendmsg}
 */
proto.snail_video.media.notify_sendmsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail_video.media.notify_sendmsg;
  return proto.snail_video.media.notify_sendmsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail_video.media.notify_sendmsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail_video.media.notify_sendmsg}
 */
proto.snail_video.media.notify_sendmsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail_video.media.object_msg;
      reader.readMessage(value,proto.snail_video.media.object_msg.deserializeBinaryFromReader);
      msg.getMsgList().push(value);
      msg.setMsgList(msg.getMsgList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.snail_video.media.notify_sendmsg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_sendmsg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail_video.media.notify_sendmsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.snail_video.media.notify_sendmsg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail_video.media.object_msg.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.snail_video.media.notify_sendmsg} The clone.
 */
proto.snail_video.media.notify_sendmsg.prototype.cloneMessage = function() {
  return /** @type {!proto.snail_video.media.notify_sendmsg} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated object_msg msg = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.snail_video.media.object_msg>}
 */
proto.snail_video.media.notify_sendmsg.prototype.getMsgList = function() {
  return /** @type{!Array.<!proto.snail_video.media.object_msg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail_video.media.object_msg, 1));
};


/** @param {Array.<!proto.snail_video.media.object_msg>} value  */
proto.snail_video.media.notify_sendmsg.prototype.setMsgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.snail_video.media.notify_sendmsg.prototype.clearMsgList = function() {
  this.setMsgList([]);
};


/**
 * @enum {number}
 */
proto.snail_video.media.eCmdC2S = {
  CMD_ECMDC2S_NONE: 0,
  CMD_PING: 1,
  CMD_REGISTER: 2,
  CMD_ADD_PARTICIPANT: 3,
  CMD_SETUSERATTRS: 4,
  CMD_SETROOMATTRS: 5,
  CMD_UPDATE_MEDIA: 6,
  CMD_SET_MEDIA_ATTR: 7,
  CMD_ORDER_UNORDER: 8,
  CMD_ORDER_STREAMS: 9,
  CMD_OLD_UPDATE_MEDIA: 10,
  CMD_REMOVE_PARTICIPANT: 15,
  CMD_REQUEST_END: 99,
  CMD_NOTIFY_USER_STATUS: 100,
  CMD_NOTIFY_SETUSERATTRS: 101,
  CMD_NOTIFY_SETROOMATTRS: 102,
  CMD_NOTIFY_MEDIA_CTRL: 103,
  CMD_NOTIFY_WEBRTC_COMMAND: 104,
  CMD_NOTIFY_REQUEST_RELOGIN: 105,
  CMD_NOTIFY_BIND_STREAMS: 106,
  CMD_NOTIFY_CANCEL_PUBLISH: 107,
  CMD_NOTIFY_SENDMSG: 200,
  CMD_NOTIFY_ERROR: 250
};

/**
 * @enum {number}
 */
proto.snail_video.media.eMediaCtrlActs = {
  CTRL_ACT_NONE: 0,
  CTRL_ACT_SENDVIDEO: 1,
  CTRL_ACT_PAUSEVIDEO: 2,
  CTRL_ACT_SENDAUDIO: 4,
  CTRL_ACT_PAUSEAUDIO: 3,
  CTRL_ACT_SENDVIDEO1: 5,
  CTRL_ACT_PAUSEVIDEO1: 6
};

/**
 * @enum {number}
 */
proto.snail_video.media.eUserStatus = {
  ST_WAIT_JOIN: 0,
  ST_ONLINE: 1,
  ST_NET_BROKEN: 2,
  ST_LEFT: 3,
  ST_REMOVED: 4
};

/**
 * @enum {number}
 */
proto.snail_video.media.epType = {
  EP_UNDEFINED: 0,
  EP_MOBILE: 1,
  EP_WIN_BROWSER: 3
};

/**
 * @enum {number}
 */
proto.snail_video.media.eReloginReson = {
  RESON_UNDEFINED: 0,
  RESON_SDP_ERROR: 1,
  RESON_LOGIC_ERROR: 2,
  RESON_P2P_TO_MANY: 3,
  RESON_RTP_TIMEOUT: 4
};

goog.object.extend(exports, proto.snail_video.media);
