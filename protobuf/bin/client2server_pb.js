// source: client2server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.snail.media.eCmdC2S', null, global);
goog.exportSymbol('proto.snail.media.eMediaCtrlActs', null, global);
goog.exportSymbol('proto.snail.media.eUserStatus', null, global);
goog.exportSymbol('proto.snail.media.notify_error', null, global);
goog.exportSymbol('proto.snail.media.notify_media_ctrl', null, global);
goog.exportSymbol('proto.snail.media.notify_send_msg', null, global);
goog.exportSymbol('proto.snail.media.notify_setroomattrs', null, global);
goog.exportSymbol('proto.snail.media.notify_setuserattrs', null, global);
goog.exportSymbol('proto.snail.media.notify_user_status', null, global);
goog.exportSymbol('proto.snail.media.notify_webrtc_command', null, global);
goog.exportSymbol('proto.snail.media.object_actions', null, global);
goog.exportSymbol('proto.snail.media.object_keyvalue', null, global);
goog.exportSymbol('proto.snail.media.object_media', null, global);
goog.exportSymbol('proto.snail.media.object_user', null, global);
goog.exportSymbol('proto.snail.media.object_webrtc_msg', null, global);
goog.exportSymbol('proto.snail.media.request_add_participant', null, global);
goog.exportSymbol('proto.snail.media.request_client2Server_header', null, global);
goog.exportSymbol('proto.snail.media.request_order_unorder', null, global);
goog.exportSymbol('proto.snail.media.request_ping', null, global);
goog.exportSymbol('proto.snail.media.request_register', null, global);
goog.exportSymbol('proto.snail.media.request_set_media_attr', null, global);
goog.exportSymbol('proto.snail.media.request_setroomattrs', null, global);
goog.exportSymbol('proto.snail.media.request_setuserattrs', null, global);
goog.exportSymbol('proto.snail.media.request_update_media', null, global);
goog.exportSymbol('proto.snail.media.respond_add_participant', null, global);
goog.exportSymbol('proto.snail.media.respond_order_unorder', null, global);
goog.exportSymbol('proto.snail.media.respond_ping', null, global);
goog.exportSymbol('proto.snail.media.respond_register', null, global);
goog.exportSymbol('proto.snail.media.respond_set_media_attr', null, global);
goog.exportSymbol('proto.snail.media.respond_setroomattrs', null, global);
goog.exportSymbol('proto.snail.media.respond_setuserattrs', null, global);
goog.exportSymbol('proto.snail.media.respond_update_media', null, global);
goog.exportSymbol('proto.snail.media.response_client2Server_header', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_client2Server_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.request_client2Server_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_client2Server_header.displayName = 'proto.snail.media.request_client2Server_header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.response_client2Server_header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.response_client2Server_header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.response_client2Server_header.displayName = 'proto.snail.media.response_client2Server_header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.notify_error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_error.displayName = 'proto.snail.media.notify_error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.object_actions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.object_actions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.object_actions.displayName = 'proto.snail.media.object_actions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.object_keyvalue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.object_keyvalue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.object_keyvalue.displayName = 'proto.snail.media.object_keyvalue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.object_webrtc_msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.object_webrtc_msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.object_webrtc_msg.displayName = 'proto.snail.media.object_webrtc_msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.object_user = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.object_user.repeatedFields_, null);
};
goog.inherits(proto.snail.media.object_user, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.object_user.displayName = 'proto.snail.media.object_user';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.object_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.object_media.repeatedFields_, null);
};
goog.inherits(proto.snail.media.object_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.object_media.displayName = 'proto.snail.media.object_media';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.request_ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_ping.displayName = 'proto.snail.media.request_ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.respond_ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_ping.displayName = 'proto.snail.media.respond_ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_register.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_register.displayName = 'proto.snail.media.request_register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.respond_register.repeatedFields_, null);
};
goog.inherits(proto.snail.media.respond_register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_register.displayName = 'proto.snail.media.respond_register';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_user_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.notify_user_status.repeatedFields_, null);
};
goog.inherits(proto.snail.media.notify_user_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_user_status.displayName = 'proto.snail.media.notify_user_status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_add_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_add_participant.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_add_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_add_participant.displayName = 'proto.snail.media.request_add_participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_add_participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.respond_add_participant.repeatedFields_, null);
};
goog.inherits(proto.snail.media.respond_add_participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_add_participant.displayName = 'proto.snail.media.respond_add_participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_webrtc_command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.notify_webrtc_command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_webrtc_command.displayName = 'proto.snail.media.notify_webrtc_command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_setuserattrs.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_setuserattrs.displayName = 'proto.snail.media.request_setuserattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.respond_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_setuserattrs.displayName = 'proto.snail.media.respond_setuserattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_setuserattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.notify_setuserattrs.repeatedFields_, null);
};
goog.inherits(proto.snail.media.notify_setuserattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_setuserattrs.displayName = 'proto.snail.media.notify_setuserattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_setroomattrs.displayName = 'proto.snail.media.request_setroomattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.respond_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail.media.respond_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_setroomattrs.displayName = 'proto.snail.media.respond_setroomattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_setroomattrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.notify_setroomattrs.repeatedFields_, null);
};
goog.inherits(proto.snail.media.notify_setroomattrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_setroomattrs.displayName = 'proto.snail.media.notify_setroomattrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_update_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_update_media.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_update_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_update_media.displayName = 'proto.snail.media.request_update_media';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_update_media = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.respond_update_media.repeatedFields_, null);
};
goog.inherits(proto.snail.media.respond_update_media, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_update_media.displayName = 'proto.snail.media.respond_update_media';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_set_media_attr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.request_set_media_attr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_set_media_attr.displayName = 'proto.snail.media.request_set_media_attr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_set_media_attr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.respond_set_media_attr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_set_media_attr.displayName = 'proto.snail.media.respond_set_media_attr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.request_order_unorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.request_order_unorder.repeatedFields_, null);
};
goog.inherits(proto.snail.media.request_order_unorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.request_order_unorder.displayName = 'proto.snail.media.request_order_unorder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.respond_order_unorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.respond_order_unorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.respond_order_unorder.displayName = 'proto.snail.media.respond_order_unorder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_media_ctrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snail.media.notify_media_ctrl.repeatedFields_, null);
};
goog.inherits(proto.snail.media.notify_media_ctrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_media_ctrl.displayName = 'proto.snail.media.notify_media_ctrl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snail.media.notify_send_msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snail.media.notify_send_msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snail.media.notify_send_msg.displayName = 'proto.snail.media.notify_send_msg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_client2Server_header.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_client2Server_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_client2Server_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_client2Server_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sessionkey: msg.getSessionkey_asB64(),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_client2Server_header}
 */
proto.snail.media.request_client2Server_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_client2Server_header;
  return proto.snail.media.request_client2Server_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_client2Server_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_client2Server_header}
 */
proto.snail.media.request_client2Server_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_client2Server_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_client2Server_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_client2Server_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_client2Server_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getSessionkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional sint32 sn = 1;
 * @return {number}
 */
proto.snail.media.request_client2Server_header.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.request_client2Server_header} returns this
 */
proto.snail.media.request_client2Server_header.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes sessionkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_client2Server_header.prototype.getSessionkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sessionkey = 2;
 * This is a type-conversion wrapper around `getSessionkey()`
 * @return {string}
 */
proto.snail.media.request_client2Server_header.prototype.getSessionkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionkey()));
};


/**
 * optional bytes sessionkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionkey()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_client2Server_header.prototype.getSessionkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_client2Server_header} returns this
 */
proto.snail.media.request_client2Server_header.prototype.setSessionkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes token = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_client2Server_header.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes token = 3;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail.media.request_client2Server_header.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_client2Server_header.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_client2Server_header} returns this
 */
proto.snail.media.request_client2Server_header.prototype.setToken = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.response_client2Server_header.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.response_client2Server_header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.response_client2Server_header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.response_client2Server_header.toObject = function(includeInstance, msg) {
  var f, obj = {
    sn: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subec: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dbspan: jspb.Message.getFieldWithDefault(msg, 4, 0),
    token: msg.getToken_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.response_client2Server_header}
 */
proto.snail.media.response_client2Server_header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.response_client2Server_header;
  return proto.snail.media.response_client2Server_header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.response_client2Server_header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.response_client2Server_header}
 */
proto.snail.media.response_client2Server_header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSn(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSubec(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDbspan(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.response_client2Server_header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.response_client2Server_header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.response_client2Server_header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.response_client2Server_header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSn();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getEc();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getSubec();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getDbspan();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getToken_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional sint32 sn = 1;
 * @return {number}
 */
proto.snail.media.response_client2Server_header.prototype.getSn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.response_client2Server_header} returns this
 */
proto.snail.media.response_client2Server_header.prototype.setSn = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 ec = 2;
 * @return {number}
 */
proto.snail.media.response_client2Server_header.prototype.getEc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.response_client2Server_header} returns this
 */
proto.snail.media.response_client2Server_header.prototype.setEc = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 subec = 3;
 * @return {number}
 */
proto.snail.media.response_client2Server_header.prototype.getSubec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.response_client2Server_header} returns this
 */
proto.snail.media.response_client2Server_header.prototype.setSubec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 dbspan = 4;
 * @return {number}
 */
proto.snail.media.response_client2Server_header.prototype.getDbspan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.response_client2Server_header} returns this
 */
proto.snail.media.response_client2Server_header.prototype.setDbspan = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes token = 5;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.response_client2Server_header.prototype.getToken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes token = 5;
 * This is a type-conversion wrapper around `getToken()`
 * @return {string}
 */
proto.snail.media.response_client2Server_header.prototype.getToken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToken()));
};


/**
 * optional bytes token = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToken()`
 * @return {!Uint8Array}
 */
proto.snail.media.response_client2Server_header.prototype.getToken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.response_client2Server_header} returns this
 */
proto.snail.media.response_client2Server_header.prototype.setToken = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_error.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_error.toObject = function(includeInstance, msg) {
  var f, obj = {
    ec: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subec: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cmd: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_error}
 */
proto.snail.media.notify_error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_error;
  return proto.snail.media.notify_error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_error}
 */
proto.snail.media.notify_error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setEc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSubec(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEc();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getSubec();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getCmd();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * optional sint32 ec = 1;
 * @return {number}
 */
proto.snail.media.notify_error.prototype.getEc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.notify_error} returns this
 */
proto.snail.media.notify_error.prototype.setEc = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 subec = 2;
 * @return {number}
 */
proto.snail.media.notify_error.prototype.getSubec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.notify_error} returns this
 */
proto.snail.media.notify_error.prototype.setSubec = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 cmd = 3;
 * @return {number}
 */
proto.snail.media.notify_error.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.notify_error} returns this
 */
proto.snail.media.notify_error.prototype.setCmd = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.object_actions.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.object_actions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.object_actions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_actions.toObject = function(includeInstance, msg) {
  var f, obj = {
    acttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ssrcids: jspb.Message.getFieldWithDefault(msg, 2, 0),
    params: msg.getParams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.object_actions}
 */
proto.snail.media.object_actions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.object_actions;
  return proto.snail.media.object_actions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.object_actions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.object_actions}
 */
proto.snail.media.object_actions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setActtype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSsrcids(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.object_actions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.object_actions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.object_actions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_actions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActtype();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getSsrcids();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional sint32 acttype = 1;
 * @return {number}
 */
proto.snail.media.object_actions.prototype.getActtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_actions} returns this
 */
proto.snail.media.object_actions.prototype.setActtype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 ssrcids = 2;
 * @return {number}
 */
proto.snail.media.object_actions.prototype.getSsrcids = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_actions} returns this
 */
proto.snail.media.object_actions.prototype.setSsrcids = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes params = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_actions.prototype.getParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes params = 3;
 * This is a type-conversion wrapper around `getParams()`
 * @return {string}
 */
proto.snail.media.object_actions.prototype.getParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParams()));
};


/**
 * optional bytes params = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParams()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_actions.prototype.getParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_actions} returns this
 */
proto.snail.media.object_actions.prototype.setParams = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.object_keyvalue.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.object_keyvalue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.object_keyvalue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_keyvalue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.object_keyvalue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.object_keyvalue;
  return proto.snail.media.object_keyvalue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.object_keyvalue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.object_keyvalue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.object_keyvalue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.object_keyvalue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.object_keyvalue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_keyvalue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_keyvalue.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.snail.media.object_keyvalue.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_keyvalue.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_keyvalue} returns this
 */
proto.snail.media.object_keyvalue.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_keyvalue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.snail.media.object_keyvalue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_keyvalue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_keyvalue} returns this
 */
proto.snail.media.object_keyvalue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.object_webrtc_msg.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.object_webrtc_msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.object_webrtc_msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_webrtc_msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mline: msg.getMline_asB64(),
    mlineIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sdp: msg.getSdp_asB64(),
    peerParams: msg.getPeerParams_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.object_webrtc_msg}
 */
proto.snail.media.object_webrtc_msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.object_webrtc_msg;
  return proto.snail.media.object_webrtc_msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.object_webrtc_msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.object_webrtc_msg}
 */
proto.snail.media.object_webrtc_msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMline(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMlineIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSdp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.object_webrtc_msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.object_webrtc_msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.object_webrtc_msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_webrtc_msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMline_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMlineIndex();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getSdp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPeerParams_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes mline = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_webrtc_msg.prototype.getMline = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mline = 1;
 * This is a type-conversion wrapper around `getMline()`
 * @return {string}
 */
proto.snail.media.object_webrtc_msg.prototype.getMline_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMline()));
};


/**
 * optional bytes mline = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMline()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_webrtc_msg.prototype.getMline_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMline()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_webrtc_msg} returns this
 */
proto.snail.media.object_webrtc_msg.prototype.setMline = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional sint32 mline_index = 2;
 * @return {number}
 */
proto.snail.media.object_webrtc_msg.prototype.getMlineIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_webrtc_msg} returns this
 */
proto.snail.media.object_webrtc_msg.prototype.setMlineIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes sdp = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_webrtc_msg.prototype.getSdp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sdp = 3;
 * This is a type-conversion wrapper around `getSdp()`
 * @return {string}
 */
proto.snail.media.object_webrtc_msg.prototype.getSdp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSdp()));
};


/**
 * optional bytes sdp = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSdp()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_webrtc_msg.prototype.getSdp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSdp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_webrtc_msg} returns this
 */
proto.snail.media.object_webrtc_msg.prototype.setSdp = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes peer_params = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_webrtc_msg.prototype.getPeerParams = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes peer_params = 4;
 * This is a type-conversion wrapper around `getPeerParams()`
 * @return {string}
 */
proto.snail.media.object_webrtc_msg.prototype.getPeerParams_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerParams()));
};


/**
 * optional bytes peer_params = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerParams()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_webrtc_msg.prototype.getPeerParams_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerParams()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_webrtc_msg} returns this
 */
proto.snail.media.object_webrtc_msg.prototype.setPeerParams = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.object_user.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.object_user.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.object_user.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.object_user} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_user.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    clientkey: msg.getClientkey_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    joinTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    leaveTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.object_user.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.object_user;
  return proto.snail.media.object_user.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.object_user} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.object_user.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientkey(value);
      break;
    case 3:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setJoinTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeaveTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.object_user.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.object_user.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.object_user} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_user.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClientkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getJoinTime();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getLeaveTime();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_user.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail.media.object_user.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_user.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.setClientid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes clientkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_user.prototype.getClientkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes clientkey = 2;
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {string}
 */
proto.snail.media.object_user.prototype.getClientkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientkey()));
};


/**
 * optional bytes clientkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientkey()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_user.prototype.getClientkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.setClientkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated object_keyvalue attrs = 3;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.object_user.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 3));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.object_user} returns this
*/
proto.snail.media.object_user.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.object_user.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};


/**
 * optional sint32 status = 4;
 * @return {number}
 */
proto.snail.media.object_user.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 join_time = 5;
 * @return {number}
 */
proto.snail.media.object_user.prototype.getJoinTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.setJoinTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint32 leave_time = 6;
 * @return {number}
 */
proto.snail.media.object_user.prototype.getLeaveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.object_user} returns this
 */
proto.snail.media.object_user.prototype.setLeaveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.object_media.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.object_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.object_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.object_media} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.object_media}
 */
proto.snail.media.object_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.object_media;
  return proto.snail.media.object_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.object_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.object_media}
 */
proto.snail.media.object_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.object_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.object_media.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.object_media} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.object_media.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes name = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.object_media.prototype.getName = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
proto.snail.media.object_media.prototype.getName_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
proto.snail.media.object_media.prototype.getName_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.object_media} returns this
 */
proto.snail.media.object_media.prototype.setName = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.object_media.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 2));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.object_media} returns this
*/
proto.snail.media.object_media.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.object_media.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.object_media} returns this
 */
proto.snail.media.object_media.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_ping.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_ping}
 */
proto.snail.media.request_ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_ping;
  return proto.snail.media.request_ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_ping}
 */
proto.snail.media.request_ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
};


/**
 * optional sint64 timestamp = 1;
 * @return {number}
 */
proto.snail.media.request_ping.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.request_ping} returns this
 */
proto.snail.media.request_ping.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_ping.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_ping}
 */
proto.snail.media.respond_ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_ping;
  return proto.snail.media.respond_ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_ping}
 */
proto.snail.media.respond_ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
};


/**
 * optional sint64 timestamp = 1;
 * @return {number}
 */
proto.snail.media.respond_ping.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.respond_ping} returns this
 */
proto.snail.media.respond_ping.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_register.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_register.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_register.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.snail.media.object_user.toObject(includeInstance, f),
    loginseq: msg.getLoginseq_asB64(),
    version: msg.getVersion_asB64(),
    roomid: msg.getRoomid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance),
    ordermode: msg.getOrdermode_asB64(),
    notify: msg.getNotify_asB64(),
    serverdata: msg.getServerdata_asB64(),
    serverIp: msg.getServerIp_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_register}
 */
proto.snail.media.request_register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_register;
  return proto.snail.media.request_register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_register}
 */
proto.snail.media.request_register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_user;
      reader.readMessage(value,proto.snail.media.object_user.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLoginseq(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoomid(value);
      break;
    case 5:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrdermode(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNotify(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerdata(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail.media.object_user.serializeBinaryToWriter
    );
  }
  f = message.getLoginseq_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVersion_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRoomid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = message.getOrdermode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getNotify_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getServerdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getServerIp_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional object_user user = 1;
 * @return {?proto.snail.media.object_user}
 */
proto.snail.media.request_register.prototype.getUser = function() {
  return /** @type{?proto.snail.media.object_user} */ (
    jspb.Message.getWrapperField(this, proto.snail.media.object_user, 1));
};


/**
 * @param {?proto.snail.media.object_user|undefined} value
 * @return {!proto.snail.media.request_register} returns this
*/
proto.snail.media.request_register.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snail.media.request_register.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes loginseq = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getLoginseq = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes loginseq = 2;
 * This is a type-conversion wrapper around `getLoginseq()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getLoginseq_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLoginseq()));
};


/**
 * optional bytes loginseq = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLoginseq()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getLoginseq_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLoginseq()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setLoginseq = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes version = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getVersion = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes version = 3;
 * This is a type-conversion wrapper around `getVersion()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersion()));
};


/**
 * optional bytes version = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersion()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setVersion = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes roomid = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getRoomid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes roomid = 4;
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getRoomid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoomid()));
};


/**
 * optional bytes roomid = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoomid()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getRoomid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoomid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated object_keyvalue attrs = 5;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.request_register.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 5));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.request_register} returns this
*/
proto.snail.media.request_register.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.request_register.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};


/**
 * optional bytes ordermode = 6;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getOrdermode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes ordermode = 6;
 * This is a type-conversion wrapper around `getOrdermode()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getOrdermode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrdermode()));
};


/**
 * optional bytes ordermode = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdermode()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getOrdermode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrdermode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setOrdermode = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes notify = 7;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getNotify = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes notify = 7;
 * This is a type-conversion wrapper around `getNotify()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getNotify_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNotify()));
};


/**
 * optional bytes notify = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNotify()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getNotify_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNotify()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setNotify = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes serverdata = 8;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getServerdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes serverdata = 8;
 * This is a type-conversion wrapper around `getServerdata()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getServerdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerdata()));
};


/**
 * optional bytes serverdata = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerdata()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getServerdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setServerdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes server_ip = 9;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_register.prototype.getServerIp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes server_ip = 9;
 * This is a type-conversion wrapper around `getServerIp()`
 * @return {string}
 */
proto.snail.media.request_register.prototype.getServerIp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerIp()));
};


/**
 * optional bytes server_ip = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerIp()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_register.prototype.getServerIp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerIp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_register} returns this
 */
proto.snail.media.request_register.prototype.setServerIp = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.respond_register.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_register.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_register.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail.media.object_user.toObject, includeInstance),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance),
    severCurrentTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startedTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_register}
 */
proto.snail.media.respond_register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_register;
  return proto.snail.media.respond_register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_register}
 */
proto.snail.media.respond_register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_user;
      reader.readMessage(value,proto.snail.media.object_user.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSeverCurrentTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStartedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_user.serializeBinaryToWriter
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
  f = message.getSeverCurrentTime();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = message.getStartedTime();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * repeated object_user users = 1;
 * @return {!Array<!proto.snail.media.object_user>}
 */
proto.snail.media.respond_register.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.snail.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_user, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_user>} value
 * @return {!proto.snail.media.respond_register} returns this
*/
proto.snail.media.respond_register.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_user=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.respond_register.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_user, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.respond_register} returns this
 */
proto.snail.media.respond_register.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated object_keyvalue attrs = 2;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.respond_register.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 2));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.respond_register} returns this
*/
proto.snail.media.respond_register.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.respond_register.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.respond_register} returns this
 */
proto.snail.media.respond_register.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};


/**
 * optional sint64 sever_current_time = 3;
 * @return {number}
 */
proto.snail.media.respond_register.prototype.getSeverCurrentTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.respond_register} returns this
 */
proto.snail.media.respond_register.prototype.setSeverCurrentTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 started_time = 4;
 * @return {number}
 */
proto.snail.media.respond_register.prototype.getStartedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.snail.media.respond_register} returns this
 */
proto.snail.media.respond_register.prototype.setStartedTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.notify_user_status.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_user_status.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_user_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_user_status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_user_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_user_status}
 */
proto.snail.media.notify_user_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_user_status;
  return proto.snail.media.notify_user_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_user_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_user_status}
 */
proto.snail.media.notify_user_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_user;
      reader.readMessage(value,proto.snail.media.object_user.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_user_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_user_status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_user_status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_user_status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_user users = 1;
 * @return {!Array<!proto.snail.media.object_user>}
 */
proto.snail.media.notify_user_status.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.snail.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_user, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_user>} value
 * @return {!proto.snail.media.notify_user_status} returns this
*/
proto.snail.media.notify_user_status.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_user=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.notify_user_status.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_user, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.notify_user_status} returns this
 */
proto.snail.media.notify_user_status.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_add_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_add_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_add_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_add_participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_add_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_add_participant}
 */
proto.snail.media.request_add_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_add_participant;
  return proto.snail.media.request_add_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_add_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_add_participant}
 */
proto.snail.media.request_add_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_user;
      reader.readMessage(value,proto.snail.media.object_user.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_add_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_add_participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_add_participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_add_participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_user users = 1;
 * @return {!Array<!proto.snail.media.object_user>}
 */
proto.snail.media.request_add_participant.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.snail.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_user, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_user>} value
 * @return {!proto.snail.media.request_add_participant} returns this
*/
proto.snail.media.request_add_participant.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_user=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.request_add_participant.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_user, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_add_participant} returns this
 */
proto.snail.media.request_add_participant.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.respond_add_participant.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_add_participant.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_add_participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_add_participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_add_participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.snail.media.object_user.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_add_participant}
 */
proto.snail.media.respond_add_participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_add_participant;
  return proto.snail.media.respond_add_participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_add_participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_add_participant}
 */
proto.snail.media.respond_add_participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_user;
      reader.readMessage(value,proto.snail.media.object_user.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_add_participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_add_participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_add_participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_add_participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_user.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_user users = 1;
 * @return {!Array<!proto.snail.media.object_user>}
 */
proto.snail.media.respond_add_participant.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.snail.media.object_user>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_user, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_user>} value
 * @return {!proto.snail.media.respond_add_participant} returns this
*/
proto.snail.media.respond_add_participant.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_user=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_user}
 */
proto.snail.media.respond_add_participant.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_user, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.respond_add_participant} returns this
 */
proto.snail.media.respond_add_participant.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_webrtc_command.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_webrtc_command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_webrtc_command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_webrtc_command.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromid: msg.getFromid_asB64(),
    toid: msg.getToid_asB64(),
    msgtype: msg.getMsgtype_asB64(),
    rtcmsg: (f = msg.getRtcmsg()) && proto.snail.media.object_webrtc_msg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_webrtc_command}
 */
proto.snail.media.notify_webrtc_command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_webrtc_command;
  return proto.snail.media.notify_webrtc_command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_webrtc_command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_webrtc_command}
 */
proto.snail.media.notify_webrtc_command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgtype(value);
      break;
    case 4:
      var value = new proto.snail.media.object_webrtc_msg;
      reader.readMessage(value,proto.snail.media.object_webrtc_msg.deserializeBinaryFromReader);
      msg.setRtcmsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_webrtc_command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_webrtc_command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_webrtc_command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_webrtc_command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgtype_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRtcmsg();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.snail.media.object_webrtc_msg.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes fromid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_webrtc_command.prototype.getFromid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes fromid = 1;
 * This is a type-conversion wrapper around `getFromid()`
 * @return {string}
 */
proto.snail.media.notify_webrtc_command.prototype.getFromid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromid()));
};


/**
 * optional bytes fromid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromid()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_webrtc_command.prototype.getFromid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_webrtc_command} returns this
 */
proto.snail.media.notify_webrtc_command.prototype.setFromid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes toid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_webrtc_command.prototype.getToid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes toid = 2;
 * This is a type-conversion wrapper around `getToid()`
 * @return {string}
 */
proto.snail.media.notify_webrtc_command.prototype.getToid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToid()));
};


/**
 * optional bytes toid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToid()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_webrtc_command.prototype.getToid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_webrtc_command} returns this
 */
proto.snail.media.notify_webrtc_command.prototype.setToid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes msgtype = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_webrtc_command.prototype.getMsgtype = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msgtype = 3;
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {string}
 */
proto.snail.media.notify_webrtc_command.prototype.getMsgtype_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgtype()));
};


/**
 * optional bytes msgtype = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_webrtc_command.prototype.getMsgtype_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgtype()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_webrtc_command} returns this
 */
proto.snail.media.notify_webrtc_command.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional object_webrtc_msg rtcmsg = 4;
 * @return {?proto.snail.media.object_webrtc_msg}
 */
proto.snail.media.notify_webrtc_command.prototype.getRtcmsg = function() {
  return /** @type{?proto.snail.media.object_webrtc_msg} */ (
    jspb.Message.getWrapperField(this, proto.snail.media.object_webrtc_msg, 4));
};


/**
 * @param {?proto.snail.media.object_webrtc_msg|undefined} value
 * @return {!proto.snail.media.notify_webrtc_command} returns this
*/
proto.snail.media.notify_webrtc_command.prototype.setRtcmsg = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snail.media.notify_webrtc_command} returns this
 */
proto.snail.media.notify_webrtc_command.prototype.clearRtcmsg = function() {
  return this.setRtcmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snail.media.notify_webrtc_command.prototype.hasRtcmsg = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_setuserattrs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_setuserattrs}
 */
proto.snail.media.request_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_setuserattrs;
  return proto.snail.media.request_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_setuserattrs}
 */
proto.snail.media.request_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_setuserattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.request_setuserattrs.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail.media.request_setuserattrs.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail.media.request_setuserattrs.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.request_setuserattrs} returns this
 */
proto.snail.media.request_setuserattrs.prototype.setClientid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.request_setuserattrs.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 2));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.request_setuserattrs} returns this
*/
proto.snail.media.request_setuserattrs.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.request_setuserattrs.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_setuserattrs} returns this
 */
proto.snail.media.request_setuserattrs.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_setuserattrs}
 */
proto.snail.media.respond_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_setuserattrs;
  return proto.snail.media.respond_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_setuserattrs}
 */
proto.snail.media.respond_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_setuserattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.notify_setuserattrs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_setuserattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_setuserattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_setuserattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_setuserattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: msg.getClientid_asB64(),
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_setuserattrs}
 */
proto.snail.media.notify_setuserattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_setuserattrs;
  return proto.snail.media.notify_setuserattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_setuserattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_setuserattrs}
 */
proto.snail.media.notify_setuserattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientid(value);
      break;
    case 2:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_setuserattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_setuserattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_setuserattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_setuserattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes clientid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_setuserattrs.prototype.getClientid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes clientid = 1;
 * This is a type-conversion wrapper around `getClientid()`
 * @return {string}
 */
proto.snail.media.notify_setuserattrs.prototype.getClientid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientid()));
};


/**
 * optional bytes clientid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientid()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_setuserattrs.prototype.getClientid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_setuserattrs} returns this
 */
proto.snail.media.notify_setuserattrs.prototype.setClientid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated object_keyvalue attrs = 2;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.notify_setuserattrs.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 2));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.notify_setuserattrs} returns this
*/
proto.snail.media.notify_setuserattrs.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.notify_setuserattrs.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.notify_setuserattrs} returns this
 */
proto.snail.media.notify_setuserattrs.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_setroomattrs}
 */
proto.snail.media.request_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_setroomattrs;
  return proto.snail.media.request_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_setroomattrs}
 */
proto.snail.media.request_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_setroomattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_keyvalue attrs = 1;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.request_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.request_setroomattrs} returns this
*/
proto.snail.media.request_setroomattrs.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.request_setroomattrs.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_setroomattrs} returns this
 */
proto.snail.media.request_setroomattrs.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.respond_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_setroomattrs}
 */
proto.snail.media.respond_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_setroomattrs;
  return proto.snail.media.respond_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_setroomattrs}
 */
proto.snail.media.respond_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_setroomattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_keyvalue attrs = 1;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.respond_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.respond_setroomattrs} returns this
*/
proto.snail.media.respond_setroomattrs.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.respond_setroomattrs.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.respond_setroomattrs} returns this
 */
proto.snail.media.respond_setroomattrs.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.notify_setroomattrs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_setroomattrs.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_setroomattrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_setroomattrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_setroomattrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    attrsList: jspb.Message.toObjectList(msg.getAttrsList(),
    proto.snail.media.object_keyvalue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_setroomattrs}
 */
proto.snail.media.notify_setroomattrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_setroomattrs;
  return proto.snail.media.notify_setroomattrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_setroomattrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_setroomattrs}
 */
proto.snail.media.notify_setroomattrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_keyvalue;
      reader.readMessage(value,proto.snail.media.object_keyvalue.deserializeBinaryFromReader);
      msg.addAttrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_setroomattrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_setroomattrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_setroomattrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_setroomattrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_keyvalue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_keyvalue attrs = 1;
 * @return {!Array<!proto.snail.media.object_keyvalue>}
 */
proto.snail.media.notify_setroomattrs.prototype.getAttrsList = function() {
  return /** @type{!Array<!proto.snail.media.object_keyvalue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_keyvalue, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_keyvalue>} value
 * @return {!proto.snail.media.notify_setroomattrs} returns this
*/
proto.snail.media.notify_setroomattrs.prototype.setAttrsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_keyvalue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_keyvalue}
 */
proto.snail.media.notify_setroomattrs.prototype.addAttrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_keyvalue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.notify_setroomattrs} returns this
 */
proto.snail.media.notify_setroomattrs.prototype.clearAttrsList = function() {
  return this.setAttrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_update_media.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_update_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_update_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_update_media} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_update_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    proto.snail.media.object_media.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_update_media}
 */
proto.snail.media.request_update_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_update_media;
  return proto.snail.media.request_update_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_update_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_update_media}
 */
proto.snail.media.request_update_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_media;
      reader.readMessage(value,proto.snail.media.object_media.deserializeBinaryFromReader);
      msg.addMedias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_update_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_update_media.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_update_media} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_update_media.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_media medias = 1;
 * @return {!Array<!proto.snail.media.object_media>}
 */
proto.snail.media.request_update_media.prototype.getMediasList = function() {
  return /** @type{!Array<!proto.snail.media.object_media>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_media, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_media>} value
 * @return {!proto.snail.media.request_update_media} returns this
*/
proto.snail.media.request_update_media.prototype.setMediasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_media=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_media}
 */
proto.snail.media.request_update_media.prototype.addMedias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_media, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_update_media} returns this
 */
proto.snail.media.request_update_media.prototype.clearMediasList = function() {
  return this.setMediasList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.respond_update_media.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_update_media.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_update_media.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_update_media} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_update_media.toObject = function(includeInstance, msg) {
  var f, obj = {
    mediasList: jspb.Message.toObjectList(msg.getMediasList(),
    proto.snail.media.object_media.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_update_media}
 */
proto.snail.media.respond_update_media.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_update_media;
  return proto.snail.media.respond_update_media.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_update_media} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_update_media}
 */
proto.snail.media.respond_update_media.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_media;
      reader.readMessage(value,proto.snail.media.object_media.deserializeBinaryFromReader);
      msg.addMedias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_update_media.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_update_media.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_update_media} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_update_media.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMediasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.snail.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * repeated object_media medias = 1;
 * @return {!Array<!proto.snail.media.object_media>}
 */
proto.snail.media.respond_update_media.prototype.getMediasList = function() {
  return /** @type{!Array<!proto.snail.media.object_media>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snail.media.object_media, 1));
};


/**
 * @param {!Array<!proto.snail.media.object_media>} value
 * @return {!proto.snail.media.respond_update_media} returns this
*/
proto.snail.media.respond_update_media.prototype.setMediasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.snail.media.object_media=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snail.media.object_media}
 */
proto.snail.media.respond_update_media.prototype.addMedias = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.snail.media.object_media, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.respond_update_media} returns this
 */
proto.snail.media.respond_update_media.prototype.clearMediasList = function() {
  return this.setMediasList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_set_media_attr.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_set_media_attr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_set_media_attr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_set_media_attr.toObject = function(includeInstance, msg) {
  var f, obj = {
    media: (f = msg.getMedia()) && proto.snail.media.object_media.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_set_media_attr}
 */
proto.snail.media.request_set_media_attr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_set_media_attr;
  return proto.snail.media.request_set_media_attr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_set_media_attr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_set_media_attr}
 */
proto.snail.media.request_set_media_attr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_media;
      reader.readMessage(value,proto.snail.media.object_media.deserializeBinaryFromReader);
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_set_media_attr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_set_media_attr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_set_media_attr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_set_media_attr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * optional object_media media = 1;
 * @return {?proto.snail.media.object_media}
 */
proto.snail.media.request_set_media_attr.prototype.getMedia = function() {
  return /** @type{?proto.snail.media.object_media} */ (
    jspb.Message.getWrapperField(this, proto.snail.media.object_media, 1));
};


/**
 * @param {?proto.snail.media.object_media|undefined} value
 * @return {!proto.snail.media.request_set_media_attr} returns this
*/
proto.snail.media.request_set_media_attr.prototype.setMedia = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snail.media.request_set_media_attr} returns this
 */
proto.snail.media.request_set_media_attr.prototype.clearMedia = function() {
  return this.setMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snail.media.request_set_media_attr.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_set_media_attr.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_set_media_attr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_set_media_attr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_set_media_attr.toObject = function(includeInstance, msg) {
  var f, obj = {
    media: (f = msg.getMedia()) && proto.snail.media.object_media.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_set_media_attr}
 */
proto.snail.media.respond_set_media_attr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_set_media_attr;
  return proto.snail.media.respond_set_media_attr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_set_media_attr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_set_media_attr}
 */
proto.snail.media.respond_set_media_attr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snail.media.object_media;
      reader.readMessage(value,proto.snail.media.object_media.deserializeBinaryFromReader);
      msg.setMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_set_media_attr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_set_media_attr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_set_media_attr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_set_media_attr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMedia();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snail.media.object_media.serializeBinaryToWriter
    );
  }
};


/**
 * optional object_media media = 1;
 * @return {?proto.snail.media.object_media}
 */
proto.snail.media.respond_set_media_attr.prototype.getMedia = function() {
  return /** @type{?proto.snail.media.object_media} */ (
    jspb.Message.getWrapperField(this, proto.snail.media.object_media, 1));
};


/**
 * @param {?proto.snail.media.object_media|undefined} value
 * @return {!proto.snail.media.respond_set_media_attr} returns this
*/
proto.snail.media.respond_set_media_attr.prototype.setMedia = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snail.media.respond_set_media_attr} returns this
 */
proto.snail.media.respond_set_media_attr.prototype.clearMedia = function() {
  return this.setMedia(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snail.media.respond_set_media_attr.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.request_order_unorder.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.request_order_unorder.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.request_order_unorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.request_order_unorder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_order_unorder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: msg.getOrdersList_asB64(),
    unordersList: msg.getUnordersList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.request_order_unorder}
 */
proto.snail.media.request_order_unorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.request_order_unorder;
  return proto.snail.media.request_order_unorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.request_order_unorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.request_order_unorder}
 */
proto.snail.media.request_order_unorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOrders(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addUnorders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.request_order_unorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.request_order_unorder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.request_order_unorder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.request_order_unorder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getUnordersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes orders = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail.media.request_order_unorder.prototype.getOrdersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes orders = 1;
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array<string>}
 */
proto.snail.media.request_order_unorder.prototype.getOrdersList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOrdersList()));
};


/**
 * repeated bytes orders = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdersList()`
 * @return {!Array<!Uint8Array>}
 */
proto.snail.media.request_order_unorder.prototype.getOrdersList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOrdersList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.setOrdersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.addOrders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * repeated bytes unorders = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail.media.request_order_unorder.prototype.getUnordersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes unorders = 2;
 * This is a type-conversion wrapper around `getUnordersList()`
 * @return {!Array<string>}
 */
proto.snail.media.request_order_unorder.prototype.getUnordersList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getUnordersList()));
};


/**
 * repeated bytes unorders = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnordersList()`
 * @return {!Array<!Uint8Array>}
 */
proto.snail.media.request_order_unorder.prototype.getUnordersList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUnordersList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.setUnordersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.addUnorders = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.request_order_unorder} returns this
 */
proto.snail.media.request_order_unorder.prototype.clearUnordersList = function() {
  return this.setUnordersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.respond_order_unorder.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.respond_order_unorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.respond_order_unorder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_order_unorder.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.respond_order_unorder}
 */
proto.snail.media.respond_order_unorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.respond_order_unorder;
  return proto.snail.media.respond_order_unorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.respond_order_unorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.respond_order_unorder}
 */
proto.snail.media.respond_order_unorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.respond_order_unorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.respond_order_unorder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.respond_order_unorder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.respond_order_unorder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snail.media.notify_media_ctrl.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_media_ctrl.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_media_ctrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_media_ctrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_media_ctrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    paramsList: msg.getParamsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_media_ctrl}
 */
proto.snail.media.notify_media_ctrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_media_ctrl;
  return proto.snail.media.notify_media_ctrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_media_ctrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_media_ctrl}
 */
proto.snail.media.notify_media_ctrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedSint32() : [reader.readSint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActions(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_media_ctrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_media_ctrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_media_ctrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_media_ctrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedSint32(
      1,
      f
    );
  }
  f = message.getParamsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated sint32 actions = 1;
 * @return {!Array<number>}
 */
proto.snail.media.notify_media_ctrl.prototype.getActionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * repeated bytes params = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.snail.media.notify_media_ctrl.prototype.getParamsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes params = 2;
 * This is a type-conversion wrapper around `getParamsList()`
 * @return {!Array<string>}
 */
proto.snail.media.notify_media_ctrl.prototype.getParamsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParamsList()));
};


/**
 * repeated bytes params = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.snail.media.notify_media_ctrl.prototype.getParamsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParamsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.setParamsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.addParams = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snail.media.notify_media_ctrl} returns this
 */
proto.snail.media.notify_media_ctrl.prototype.clearParamsList = function() {
  return this.setParamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snail.media.notify_send_msg.prototype.toObject = function(opt_includeInstance) {
  return proto.snail.media.notify_send_msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snail.media.notify_send_msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_send_msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromid: msg.getFromid_asB64(),
    toid: msg.getToid_asB64(),
    msgtype: msg.getMsgtype_asB64(),
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snail.media.notify_send_msg}
 */
proto.snail.media.notify_send_msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snail.media.notify_send_msg;
  return proto.snail.media.notify_send_msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snail.media.notify_send_msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snail.media.notify_send_msg}
 */
proto.snail.media.notify_send_msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFromid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setToid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgtype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snail.media.notify_send_msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snail.media.notify_send_msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snail.media.notify_send_msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snail.media.notify_send_msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgtype_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes fromid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_send_msg.prototype.getFromid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes fromid = 1;
 * This is a type-conversion wrapper around `getFromid()`
 * @return {string}
 */
proto.snail.media.notify_send_msg.prototype.getFromid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFromid()));
};


/**
 * optional bytes fromid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFromid()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_send_msg.prototype.getFromid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFromid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_send_msg} returns this
 */
proto.snail.media.notify_send_msg.prototype.setFromid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes toid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_send_msg.prototype.getToid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes toid = 2;
 * This is a type-conversion wrapper around `getToid()`
 * @return {string}
 */
proto.snail.media.notify_send_msg.prototype.getToid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getToid()));
};


/**
 * optional bytes toid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getToid()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_send_msg.prototype.getToid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getToid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_send_msg} returns this
 */
proto.snail.media.notify_send_msg.prototype.setToid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes msgtype = 3;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_send_msg.prototype.getMsgtype = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msgtype = 3;
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {string}
 */
proto.snail.media.notify_send_msg.prototype.getMsgtype_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgtype()));
};


/**
 * optional bytes msgtype = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgtype()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_send_msg.prototype.getMsgtype_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgtype()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_send_msg} returns this
 */
proto.snail.media.notify_send_msg.prototype.setMsgtype = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes msg = 4;
 * @return {!(string|Uint8Array)}
 */
proto.snail.media.notify_send_msg.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msg = 4;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.snail.media.notify_send_msg.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.snail.media.notify_send_msg.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.snail.media.notify_send_msg} returns this
 */
proto.snail.media.notify_send_msg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.snail.media.eCmdC2S = {
  CMD_ECMDC2S_NONE: 0,
  CMD_PING: 1,
  CMD_REGISTER: 2,
  CMD_ADD_PARTICIPANT: 3,
  CMD_SETUSERATTRS: 4,
  CMD_SETROOMATTRS: 5,
  CMD_UPDATE_MEDIA: 6,
  CMD_SET_MEDIA_ATTR: 7,
  CMD_ORDER_UNORDER: 8,
  CMD_OLD_UPDATE_MEDIA: 10,
  CMD_REQUEST_END: 99,
  CMD_NOTIFY_USER_STATUS: 100,
  CMD_NOTIFY_SETUSERATTRS: 101,
  CMD_NOTIFY_SETROOMATTRS: 102,
  CMD_NOTIFY_MEDIA_CTRL: 103,
  CMD_NOTIFY_WEBRTC_COMMAND: 104,
  CMD_NOTIFY_ERROR: 250
};

/**
 * @enum {number}
 */
proto.snail.media.eMediaCtrlActs = {
  CTRL_ACT_NONE: 0,
  CTRL_ACT_SENDVIDEO: 1,
  CTRL_ACT_PAUSEVIDEO: 2,
  CTRL_ACT_SENDAUDIO: 4,
  CTRL_ACT_PAUSEAUDIO: 3
};

/**
 * @enum {number}
 */
proto.snail.media.eUserStatus = {
  ST_WAIT_JOIN: 0,
  ST_ONLINE: 1,
  ST_NET_BROKEN: 2,
  ST_LEFT: 3
};

goog.object.extend(exports, proto.snail.media);
